head     3.0;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


3.0
date     86.09.18.16.04.13;  author lynch;  state Exp;
branches ;
next     1.1;

1.1
date     86.09.11.13.46.17;  author lynch;  state Exp;
branches ;
next     ;


desc
@works.
@


3.0
log
@ working version, last day
@
text
@/*---------------------------------------------------------------------------
 * Routines to implement the points for breaking and tracing.  Commands
   are set up with the menus such that the value of the menu is one more
   than the value of the tracepoint, and that the argument to toggle the
   point is the pointType array of points.  In this way, the command menus
   don't have to look up the referencing point array.
 * 
 * William L. Lynch		Mon Sep  8 10:27:53 1986
 *---------------------------------------------------------------------------
 */

#include "../bool.h"
#include "cdb.h"
#include "static.h"
#include "dynamic.h"
#include "tables.h"

#define pointFunc(type)\
bool \
points_/**/type( pp, kind ) \
process *pp;\
unsigned short kind;\
{\
	pointType p;\
\
	p = pp->point.type[pp->id];\
	return	kind == TRACE ? p.traces == ON : p.breaks == ON;\
}

pointFunc(accept)
pointFunc(create)
pointFunc(transact)
pointFunc(delay)
pointFunc(terminate)
pointFunc(select)
pointFunc(treturn)


points_pointsInit( field, number )
pointType **field;
int number;
{
	int i;
	
	*field = instances(number, pointType);
	for ( i=0; i < number; i++ ) {
		(*field)[i].traces = ON;
		(*field)[i].breaks = OFF;
	}
}

points_processInit( pp )
process *pp;
{
	staticProcessInfo *infop;
	
	infop = static_infoLookup(pp->name);

	points_pointsInit(&pp->point.accept, infop->points.numAccepts);
	points_pointsInit(&pp->point.create, infop->points.numCreates);
	points_pointsInit(&pp->point.transact, infop->points.numTransacts);
	points_pointsInit(&pp->point.delay, infop->points.numDelays);
	points_pointsInit(&pp->point.terminate, infop->points.numTerminates);
	points_pointsInit(&pp->point.select, infop->points.numSelects);
	points_pointsInit(&pp->point.treturn, infop->points.numTreturns);

}

@


1.1
log
@Initial revision
@
text
@d2 5
a6 6
 * Routines to implement the points for breaking and tracing.  The arrays
 * are lookup tables between occurrence id's and point offsets, so that
 * when an occurrence happens, the point array can be queried about whether or
 * not it is on.  Translate is used to map global id numbers to process id
   numbers for querying about points.  Indexed by the occurrence id, it
   returns the process specific id.
d15 1
a16 1
#include "dynamic.h"
d18 1
a18 47


points_translateInit()
{
	translate.accept	= instances(occurTable.accepts, point);
	translate.create	= instances(occurTable.creates, point);
	translate.transact	= instances(occurTable.transacts, point);
	translate.select	= instances(occurTable.selects, point);
	translate.delay		= instances(occurTable.delays, point);
	translate.terminate	= instances(occurTable.terminates, point);
	translate.treturn	= instances(occurTable.treturns, point);
}


/* translate checks through occurrences of type class for ones matching this
 namespace.  If a match occurs, then an entry is made in the translation table
 to map that occurrence for this process to the global occurrence number. */

#define translate1(class) \
	infop->points.class/**/s = 0;\
	infop->points.localToGlobal.class = instances(occurTable.class/**/s, int);\
	for ( i=1; i < occurTable.class/**/s; i++ )\
		if ( occurTable.class[i].space == symbolp->num ) {\
			infop->points.localToGlobal.class[infop->points.class/**/s] = i;\
			translate.class[i] = infop->points.class/**/s++;\
	} infop->points.localToGlobal.class = (int *)realloc(infop->points.localToGlobal.class, infop->points.class/**/s * sizeof(int))
	


points_translate( symbolp, infop )
symbol *symbolp;
staticProcessInfo *infop;
{
	int i;

	translate1(accept);
	translate1(create);
	translate1(transact);
	translate1(select);
	translate1(delay);
	translate1(terminate);
	translate1(treturn);
}



#define pointFunc(type) \
d20 1
a20 1
points_/**/type( pp, kind )\
d26 1
a26 1
	p = pp->point.type[translate.type[pp->id]];\
d37 32
@
