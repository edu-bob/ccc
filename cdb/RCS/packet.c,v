head     3.0;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


3.0
date     86.09.18.16.04.08;  author lynch;  state Exp;
branches ;
next     1.2;

1.2
date     86.09.11.13.46.07;  author lynch;  state Exp;
branches ;
next     1.1;

1.1
date     86.08.27.12.23.10;  author lynch;  state Exp;
branches ;
next     ;


desc
@working version
@


3.0
log
@ working version, last day
@
text
@/*---------------------------------------------------------------------------
 * These routines define the link between the communication package and
 * the cdb front end.
 * 
 * There are six types of packets, corresponding to six types of
 * events.  The first type is a simple block.  A first-type packet (P1)
 * contatins an event specifier, a time stamp, the pid of the process, and
 * the source occurrence id of the event.   The second type of event is an
 * unblock.  A P2 packet contains all the same information as a P1 packet,
 * but also includes a destination pid for the signal.  The third type of
 * event is one in which paramters are going to be sent to cdb.
 * Currently, these events are creates, accepts, and treturns.  The P3
 * packet is a P1 packet, but includes a string of the parameters.
 * The P4 packet does not correspond directly to source events, and
   consists of only an event specifier and timestamp.  The P5 packet is a
   P4 packet with a destination pid.  The P6 packet is for DD_ISbORN
   signals, where cdb will need to know both the p5 information and the
   task pointer.
 * 
 * 	event	time	pid	topid	id	parms	task *
 * P1	y	y	y		y
 * P2	y	y	y	y	y
 * P3	y	y	y	a	y	y
 * P4	y	y	y
 * P5	y	y	y	y
 * P6	y	y	y	y			y
 *  * a: used for taskp on waitTrans
 * 
 * William L. Lynch		Tue Aug  5 15:58:56 1986
 *---------------------------------------------------------------------------
 */

#include "../DD_include.h"
#include <stdio.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include "cdb.h"
#include "static.h"
#include "tables.h"
#include "../bool.h"	

extern sock cdbs;

bool Reading = FALSE;		/* reading from a file */
bool Saving = FALSE;		/* saving to a file */
int outFile;
 
saving( flag )
bool flag;
{
	Saving = flag;
}

outputFile( fileName )
string fileName;
{
	FILE *out;
	
	Saving = TRUE;
	out =  fopen(fileName, "w");
	if ( out == NULL )
		fatal(1, "Can't open %s.\n", fileName);
	outFile = fileno(out);
}

inputFile( fileName )
string fileName;
{
	FILE *in;
	
	Reading = TRUE;
	in = fopen(fileName, "r");
	if ( in == NULL )
		fatal(1, "Can't open %s.\n", fileName);
	cdbs = fileno(in);
}


static int
message(d, buf, size)
int d;
char *buf;
int size;
{
	int cc, left;

	left = size;
	while ( left > 0 ) {
		cc = read(d, buf, size);
		if ( cc != 0 ) {
			left -= cc;			
			buf += cc;
		} else {
			size = 0;
			left = 0;
		}
	}
	return size;
}



get(socket, msg, size)
sock socket;
char *msg;
int size;
{
	int returnVal;

	returnVal = message(socket, msg, size);
	if ( Saving )
		write(outFile, msg, size);
	return returnVal;
}

static
recvShort(msg)
unsigned *msg;
{
	u_short message;

	get(cdbs, &message, sizeof(u_short));
	*msg = (unsigned)ntohs(message);
}


static
recvLong(msg)
unsigned *msg;
{
	u_long message;

	get(cdbs, &message, sizeof(u_long));
	*msg = (unsigned)ntohl(message);
}


#define RECVsTRINGsIZE	20

static
recvString(str)
string *str;
{	
	char msg;
	string buf;
	char *bp;
	int bufSize = RECVsTRINGsIZE;
	
	buf = bp = (char *)malloc(RECVsTRINGsIZE);
	do {
		if ( bp > buf + bufSize ) {
			buf = (char *)realloc(buf, 2*bufSize);
			bp = buf + bufSize + 1;
			bufSize *= 2;
		}
		get(cdbs, &msg, sizeof msg);	
		*bp++ = msg;
	} while ( msg != '\0' );
	*str = newstr(buf);
	free(buf);
}



packet_recvP1(time, pid, id)
u_long *time;
unsigned *pid;
unsigned *id;
{
	recvLong(time);
	recvShort(pid);
	recvShort(id);
}



packet_recvP2(time, pid, toPid, id)
u_long *time;
unsigned *pid;
unsigned *toPid;
unsigned *id;
{
	recvLong(time);
	recvShort(pid);
	recvShort(toPid);
	recvShort(id);
}

packet_recvP3(time, pid, id, toPid,  parms)
u_long *time;
unsigned *pid;
unsigned *id;
unsigned *toPid;
string *parms;
{
	recvLong(time);
	recvShort(pid);
	recvShort(id);
	recvLong(toPid);		/* might be taskp, use long */
	recvString(parms);
}

packet_recvP4(time, pid)
u_long *time;
unsigned *pid;
{
	recvLong(time);
	recvShort(pid);
}

packet_recvP5(time, pid, toPid)
u_long *time;
unsigned *pid, *toPid;
{
	recvLong(time);
	recvShort(pid);
	recvShort(toPid);
}

packet_recvP6(time, pid, toPid, task)
u_long *time;
unsigned *pid, *toPid, *task;
{
	recvLong(time);
	recvShort(pid);
	recvShort(toPid);
	recvLong(task);
}


/*---------------------------------------------------------------------------
 * The following are used for the initialization of the symbol an
 * occurrence tables in cdb
 *---------------------------------------------------------------------------
 */


packet_recvSize(size)
unsigned *size;
{
	recvShort(size);
}

	
packet_recvSymbol(sym)
symbol *sym;
{
	recvString(&sym->name);
	recvShort(&sym->space);
	recvShort(&sym->num);
	recvLong(&sym->chain);
	recvShort(&sym->obj);
}

packet_recvOccur(ocr)
occur *ocr;
{
	unsigned i;

	recvString(&ocr->name);
	recvShort(&ocr->line);
	packet_recvSize(&ocr->numFormals);
	ocr->formals = instances(ocr->numFormals, formal);
	for ( i=0; i < ocr->numFormals; i++ ) 
		recvString(&ocr->formals[i]);
}

packet_recvOtherOccur(occur)
otherOccur *occur;
{
	recvShort(&occur->line);
}

packet_recvSelectOccur(occur)
selectOccur *occur;
{
	recvShort(&occur->line);
	recvShort(&occur->termLine);
	recvShort(&occur->immedLine);
}

packet_recvTreturnOccur(occur)
treturnOccur *occur;
{
	recvShort(&occur->line);
}

packet_recvName( name )
string *name;
{
	recvString(name);
}

@


1.2
log
@works
@
text
@a262 1
	recvShort(&ocr->space);
a272 1
	recvShort(&occur->space);
a278 1
	recvShort(&occur->space);
d287 6
a292 1
	recvShort(&occur->space);
@


1.1
log
@Initial revision
@
text
@d27 1
a28 2
 * a: used for taskp on waitTrans
 * 
a33 1
#include "../DD_kernel.h"
d39 1
d41 1
a41 1
	
d45 9
d55 11
d67 2
a68 3
static
sendShort(msg)
unsigned msg;
d70 8
a77 1
	u_short message;
d79 21
a99 2
	message = htons((u_short)msg);
	send(cdbs, &message, sizeof (u_short), 0);
d103 14
d123 1
a123 1
	commun_recv(cdbs, &message, sizeof(u_short), 0);
a126 5
static
sendLong(msg)
unsigned msg;
{
	u_long message;
a127 5
	message = htonl((u_long)msg);
	send(cdbs, &message, sizeof (u_long), 0);
}


d134 1
a134 1
	commun_recv(cdbs, &message, sizeof(u_long), 0);
d157 1
a157 1
		commun_recv(cdbs, &msg, sizeof msg, 0);	
a163 6
static
sendString(str)
string str;
{
	send(cdbs, str, strlen(str)+1, 0);
}
a164 5
DD_packet_sendEvent(event)
unsigned event;
{
	sendShort(event);
}
d166 1
a166 15
DD_packet_sendP1(time, pid, id)
u_long time;
unsigned pid;
unsigned id;
{
	sendLong(time);
	sendLong(pid);
	sendShort(id);
}





DD_packet_recvP1(time, pid, id)
d172 1
a172 1
	recvLong(pid);
d178 1
a178 14
DD_packet_sendP2(time, pid, toPid, id)
u_long time;
unsigned pid;
unsigned toPid;
unsigned id;
{
	sendLong(time);
	sendLong(pid);
	sendLong(toPid);
	sendShort(id);
}


DD_packet_recvP2(time, pid, toPid, id)
d185 2
a186 2
	recvLong(pid);
	recvLong(toPid);
d190 1
a190 16

DD_packet_sendP3(time, pid, id, toPid, parms)
u_long time;
unsigned pid;
unsigned id;
unsigned toPid;
string parms;
{
	sendLong(time);
	sendLong(pid);
	sendShort(id);
	sendLong(toPid);
	sendString(parms);
}

DD_packet_recvP3(time, pid, id, toPid,  parms)
d198 1
a198 1
	recvLong(pid);
d200 1
a200 1
	recvLong(toPid);
d204 1
a204 10

DD_packet_sendP4(time, pid)
u_long time;
unsigned pid;
{
	sendLong(time);
	sendLong(pid);
}

DD_packet_recvP4(time, pid)
d209 1
a209 1
	recvLong(pid);
d212 1
a212 10
DD_packet_sendP5(time, pid, toPid)
u_long time;
unsigned pid, toPid;
{
	sendLong(time);
	sendLong(pid);
	sendLong(toPid);
}

DD_packet_recvP5(time, pid, toPid)
d217 2
a218 2
	recvLong(pid);
	recvLong(toPid);
d221 1
a221 12

DD_packet_sendP6(time, pid, toPid, task)
u_long time;
unsigned pid, toPid, task;
{
	sendLong(time);
	sendLong(pid);
	sendLong(toPid);
	sendLong(task);
}

DD_packet_recvP6(time, pid, toPid, task)
d226 2
a227 2
	recvLong(pid);
	recvLong(toPid);
d239 1
a239 8
DD_packet_sendSize(size)
unsigned size;
{
	sendShort(size);
}


DD_packet_recvSize(size)
a244 12

DD_packet_sendSymbol(sym)
DD_symEntry sym;
{
	sendString(sym.name);
	sendShort(sym.space);
	sendShort(sym.num);
	sendLong(sym.chain);
	sendShort(sym.obj);
}


d246 1
a246 1
DD_packet_recvSymbol(sym)
d256 1
a256 14

DD_packet_sendOccur(occur)
DD_occur occur;
{
	int i;
	
	sendString(occur.name);
	sendShort(occur.line);
	sendShort(occur.numFormals);
	for ( i=0; i < occur.numFormals; i++ )
		sendString(occur.formals[i]);
}

DD_packet_recvOccur(ocr)
d263 2
a264 1
	DD_packet_recvSize(&ocr->numFormals);
d270 1
a270 7
DD_packet_sendOtherOccur(occur)
DD_otherOccur occur;
{
	sendShort(occur.line);
}

DD_packet_recvOtherOccur(occur)
d274 1
d277 1
a277 9
DD_packet_sendSelectOccur(occur)
DD_selectOccur occur;
{
	sendShort(occur.line);
	sendShort(occur.termLine);
	sendShort(occur.immedLine);
}

DD_packet_recvSelectOccur(occur)
d281 1
d286 1
a286 7
DD_packet_sendTreturnOccur(occur)
DD_treturnOccur occur;
{
	sendShort(occur.line);
}

DD_packet_recvTreturnOccur(occur)
d290 1
@
