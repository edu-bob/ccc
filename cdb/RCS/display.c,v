head     3.0;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @ * @;


3.0
date     86.09.18.16.03.56;  author lynch;  state Exp;
branches ;
next     1.2;

1.2
date     86.09.11.13.45.55;  author lynch;  state Exp;
branches ;
next     1.1;

1.1
date     86.08.13.17.09.25;  author lynch;  state Exp;
branches ;
next     ;


desc
@works with curses.
@


3.0
log
@ working version, last day
@
text
@/*---------------------------------------------------------------------------
 * This code is the user interface for cdb.
 * 
 * William L. Lynch		Tue Jul 29 13:26:08 1986
 *---------------------------------------------------------------------------
 */

#include <sys/types.h>
#include <stdio.h>
#include "../bool.h"
#include "cdb.h"
#include "static.h"
#include "dynamic.h"
#include "stateString.h"
#include "format.h"
#include "tables.h"

#define min(a,b)	((a)<(b) ? a : b)
#define max(a,b)	((a)>(b) ? a : b)

typedef int window;
window cdbIO, statusWin, userIO, userError;
extern window control;

display_init()
{
	statusWin = win_create(CDBeRRsTART, 1, CDBeRRlINES, COLS);
	win_move(statusWin, 2, 1);
	win_cursor_off(statusWin);

	userError= win_create(USEReRRsTART, 1, USEReRRlINES, COLS);
	win_cursor_off(userError);

	userIO = win_create(USERiosTART, 1, USERiolINES, COLS);
	win_cursor_off(userIO);

	cdbIO = win_create(CDBsTART, 1, CDBlINES, COLS);
	win_cursor_off(cdbIO);
	win_select(cdbIO);
}

display_end()
{
	win_end();
}




extern sock std;


userOut( buf, size )
char *buf;
int size;
{
	win_push(userIO);
	for ( ; size > 0; size-- )
		putchar(*buf++);
	fflush(stdout);
	win_pop();
}


userErr( buf,size )
char *buf;
int size;
{
	win_push(userError);
	for ( ; size > 0 ; size-- )
		putchar(*buf++);
	fflush(stdout);
	win_pop();
}


cdbOut( s, p1, p2, p3, p4, p5, p6, p7, p8, p9 )
string s;
{
	win_push(cdbIO);
	printf(s, p1, p2, p3, p4, p5, p6, p7, p8, p9);
	fflush(stdout);
	win_pop();
}

cdbStatus( s, p1, p2, p3, p4, p5, p6, p7, p8, p9 )
string s;
{
	win_push(statusWin);
	printf("\n");
	printf(s, p1, p2, p3, p4, p5, p6, p7, p8, p9);
	fflush(stdout);
	win_pop();
}


string
getTag( pp )
process *pp;
{
	char buf[40];
	
	sprintf(buf, "%.10s<%d>", pp->name, static_infoLookup(pp->name)->tagId++);
	return newstr(buf);
}


display_clock( time )
unsigned long time;
{
	win_push(control);
	win_move(control, CLOCKrOW, CLOCKcOL);
	printf("%10d", time);
	fflush(stdout);
	win_pop();
}

display_clear( pp )
process *pp;
{
	int i;
	
	win_push(cdbIO);
	for ( i=0; i < LINESpERpROCESS; i++  ) {
		win_move(cdbIO, pp->display.row + i, 0);
		printf("%5s","");      /* 5 is CHANNEL */
		win_move(cdbIO, pp->display.row + i, pp->display.col);
		clear_to_eol();		
	}
	win_pop();
}


display_process( pp )
process *pp;
{
	win_push(cdbIO);
	win_move(cdbIO, pp->display.row, pp->display.col);
	printf("%s", stateString[(int)pp->state]);
	switch ( pp->state ) {
	case waitTrans:
		printf(" on %s.%s", pp->with->tag,
					pp->info->points.transact[pp->id].name);
		display_line(pp, pp->info->points.transact[pp->id].line);
	        break;
	case waitBorn:
		printf(" %s", pp->info->points.create[pp->id].name);
		display_line(pp, pp->info->points.create[pp->id].line);
	        break;
	case waitAccept:
		printf(" %s", pp->info->points.accept[pp->id].name);
		display_line(pp, pp->info->points.accept[pp->id].line);
	        break;
	case accepting:
		printf(" %s", pp->info->points.accept[pp->id].name);
		display_line(pp, pp->info->points.accept[pp->id].line);
	        break;
	case waitSelect:
		display_line(pp, pp->info->points.select[pp->id].line);
	        break;
	}
	clear_to_eol();
	fflush(stdout);
	win_pop();
}


display_line( pp, line )
process *pp;
int line;
{
	printf(", LINE: %d", line);
}
display_parms( pp )
process *pp;
{
	int i;
	char *comma, *parmp, *parms;
	int bound = COLS;


	win_push(cdbIO);
	win_move(cdbIO, pp->display.row+1, pp->display.col);
	
	parms = instances(bound, char);

	if ( pp->state == treturned )
		sprintf(parms, "treturned ");
	else 
		sprintf(parms, "(");
	parmp = &parms[strlen(parms)];

	comma = "";
	for ( i=0; i < pp->numParms; i++ ) {
		int length;
		
		length = parmp - parms;
		if ( length + strlen(pp->parms[i]) + 1 > bound ) {
			bound *= 2;
			parms = (char *)realloc(parms, bound);
			parmp = parms + length;
		}
					
		strcat(parmp, comma);
		strcat(parmp, pp->parms[i]);
		parmp += strlen(parmp);
		comma = ", ";
	}
	if ( pp->state == treturned ) {
		char toString[100];
		sprintf(toString," to %s.%s", pp->with->tag,pp->with->transactName);
		strcat(parmp, toString);
	} else
		strcat(parmp, ")");
	
	printf("%.60s", parms);
	clear_to_eol();
	if ( parmp - parms > 60 )
		cdbStatus(&parms[60]);
	free(parms);
	
	fflush(stdout);
	win_pop();
}

display_eraseParms( pp )
process *pp;
{
	int i;

	win_push(cdbIO);
	win_move(cdbIO, pp->display.row+1, pp->display.col);
	clear_to_eol();
	fflush(stdout);
	win_pop();
}


display_template(pp)
process *pp;
{
/*
	win_push(cdbIO);
	win_move(cdbIO, pp->display.row, CHANNEL+1);
	printf("%-.12s ", pp->tag);
	fflush(stdout);
	win_pop();
*/
}

display_locationInit(pp)
process *pp;
{
	static int line = 2;
	
	pp->display.row = line;
	line += LINESpERpROCESS;
	pp->display.col = CHANNEL+1+12+1;
	pp->display.channel = 0;
	display_template(pp);
}

static bool vert[CHANNEL] = {0,1,1,1,1};

display_drawLine( pp1, pp2 )
process *pp1, *pp2;
{
	
	int i, j;
	
	win_push(cdbIO);
	for ( i=1; i < CHANNEL; i++ ) {
		if ( vert[i] )
			break;
	}
	vert[i] = FALSE;
	
	pp1->display.channel = pp2->display.channel = i;

	drawHorizontal(pp1->display.row,  i, CHANNEL, '-', '>');
	drawHorizontal(pp2->display.row,  i, CHANNEL, '-', '<');
	drawVertical(i, min(pp1->display.row, pp2->display.row), max(pp1->display.row, pp2->display.row), '|');
	fflush(stdout);
	win_pop();
}


display_eraseLine( pp1, pp2 )
process *pp1, *pp2;
{
	int low, high, channel;
	
	win_push(cdbIO);
	low = min(pp1->display.row, pp2->display.row);
	high =  max(pp1->display.row, pp2->display.row);
	
	channel = pp1->display.channel;
	vert[channel] = TRUE;
	
	drawHorizontal(high, channel, CHANNEL, ' ', ' ');
	drawHorizontal(low, channel, CHANNEL, ' ', ' ');
	drawVertical(channel, low, high, ' ');
	win_pop();
}


drawHorizontal(row, startCol, endCol, line, arrow)
int row, startCol, endCol;
char line, arrow;
{
	win_move(cdbIO, row, endCol);
	putchar(arrow);

	win_line_move(cdbIO, row, startCol);
	if ( line == ' ' )
		win_line_erase(cdbIO, row, endCol);
	else
		win_line_draw(cdbIO, row, endCol);
}



drawVertical(col, startRow, endRow, line)
int col, startRow, endRow;
char line;
{
	win_line_move(cdbIO, startRow, col);
	if ( line == ' ' )
		win_line_erase(cdbIO, endRow, col);
	else
		win_line_draw(cdbIO, endRow, col);
}


display_refresh()
{
	int i;

	for ( i=1; i < CHANNEL; i++ )
		vert[i] = TRUE;
	dynamic_dump();
}



debugPrintf(s, p1, p2, p3, p4, p5, p6, p7, p8, p9)
string s;
{
	win_push(cdbIO);
	win_move(cdbIO, 30, 1);
	printf(s, p1, p2, p3, p4, p5, p6, p7, p8, p9);
	fflush(stdout);
	win_pop();
}
@


1.2
log
@*** empty log message ***
@
text
@d12 1
a15 1
#include "static.h"
d48 2
d143 2
a144 2
					occurTable.transact[pp->id].name);
		display_line(pp, occurTable.transact[pp->id].line);
d147 2
a148 2
		printf(" %s", occurTable.create[pp->id].name);
		display_line(pp, occurTable.create[pp->id].line);
d151 2
a152 2
		printf(" %s", occurTable.accept[pp->id].name);
		display_line(pp, occurTable.accept[pp->id].line);
d155 2
a156 2
		printf(" %s", occurTable.accept[pp->id].name);
		display_line(pp, occurTable.accept[pp->id].line);
d159 1
a159 1
		display_line(pp, occurTable.select[pp->id].line);
d188 1
a188 1
		sprintf(parms, "%s treturned: (", pp->transactName);
d209 6
a214 1
	strcat(parmp, ")");
@


1.1
log
@Initial revision
@
text
@d9 2
a10 1
#include <curses.h>
d14 3
d18 2
a19 6
#define USEReRROR 5
#define USERio LINES/2-USEReRROR
#define CDBio 0
#define CLOCKY 0
#define CLOCKX 60
#define CHANNEL 5
d21 3
a23 2
WINDOW *userIO, *userError, *cdbIO;
WINDOW *current;
d25 5
d31 2
d34 6
a39 14
display_init()
{
	initscr();
	crmode();
	noecho();
	nonl();
	clear();
	userError = newwin(USEReRROR, 0, 0, 0);
	userIO = newwin(USERio, 0, USEReRROR+1, 0);
	current = cdbIO = newwin(CDBio, 0, USERio+USEReRROR+2, 0);
	scrollok(userError, TRUE);
	scrollok(userIO, TRUE);
	scrollok(cdbIO, TRUE);
	refresh();
d44 1
a44 1
	endwin();
a46 4
display_refresh()
{
	refresh();
}
a49 12
input()
{
	char b[50], c;
	
	if ( current == cdbIO ) {
		c = getch();
		command(&c, 1);
	} else if ( current == userIO ) {
		wgetstr(userIO, b);
		write(std, b, strlen(b));
	}
}
d51 1
a51 3


userOut(buf, size)
d55 5
a59 4
	int i;
	for ( i=0; i < size; i++ )
		waddch(userIO, *buf++);
	wrefresh(userIO);
d63 1
a63 1
userErr(buf,size)
d67 5
a71 4
	int i;
	for ( i=0; i < size; i++ )
		waddch(userError, *buf++);
	wrefresh(userError);
d75 1
a75 1
cdbOut(s, p1, p2, p3, p4, p5, p6, p7, p8, p9)
d78 4
a81 2
	wprintw(cdbIO, s, p1, p2, p3, p4, p5, p6, p7, p8, p9);
	wrefresh(cdbIO);
d84 1
a84 1
cdbErr(s, p1, p2, p3, p4, p5, p6, p7, p8, p9)
d87 5
a91 2
	wmove(cdbIO, 0, 0);
	cdbOut(s, p1, p2, p3, p4, p5, p6, p7, p8, p9);
d96 1
a96 1
getTag(pp)
d99 1
a99 2
	char buf[20], *bp;
	int y, x;
d101 1
a101 24
	wmove(cdbIO, 0, 0);
	waddstr(cdbIO, "                                                     ");
	wmove(cdbIO, 0, 0);
	waddstr(cdbIO, "tag: ");
	wrefresh(cdbIO);
	bp = buf - 1;
	do {
		*++bp = getch();
		while ( *bp == '' ) {
			if ( bp > buf ) {
				getyx(cdbIO, y, x);
				wmove(cdbIO, y, x-1);
				waddch(cdbIO, ' ');
				wmove(cdbIO, y, x-1);
				wrefresh(cdbIO);
				bp -= 1;
			} else 
				*bp = '\0';
		*bp = getch();
		}
		waddch(cdbIO, *bp);
		wrefresh(cdbIO);
	} while ( bp < buf+20 && *bp != '' );
	*bp = '\0';
d106 1
a106 1
display_clock(time)
d109 5
a113 5
	wmove(cdbIO, CLOCKY, CLOCKX);
	standout();
	wprintw(cdbIO, "%10d", time);
	standend();
	wrefresh(cdbIO);
d116 14
d131 2
a132 1
display_process(pp)
d135 28
a162 5
	wmove(cdbIO, pp->display.y, pp->display.x);
	wclrtoeol(cdbIO);
	wprintw(cdbIO, "NAME: %10s, TAG: %10s, PID: %u, STATE: %s\n",
		pp->name, pp->tag, pp->pid, stateString[(int)pp->state]);
	wrefresh(cdbIO);
d166 12
d179 65
d247 1
a247 1
	static int line = 1;
d249 5
a253 2
	pp->display.y = line++;
	pp->display.x = CHANNEL+1;
d256 1
a256 1
static bool vert[CHANNEL] = {1,1,1,1,1};
d262 1
a262 1
	int i, j, low, high;
d264 2
a265 1
	for ( i=0; i < CHANNEL; i++ ) {
d273 5
a277 11
	low = pp1->display.y;
	if ( pp2->display.y < low ) {
		high = low;
		low = pp2->display.y;
	} else
		high = pp2->display.y;

	drawHorizontal(pp1->display.y, i, CHANNEL, '-', '>');
	drawHorizontal(pp2->display.y,  i, CHANNEL, '-', '<');
	drawVertical(i, low, high, '|');
	wrefresh(cdbIO);
d286 4
a289 8

	low = pp1->display.y;
	if ( pp2->display.y < low ) {
		high = low;
		low = pp2->display.y;
	} else
		high = pp2->display.y;

d296 1
d304 8
a311 5
	int x;
	
	for ( x=startCol; x < endCol; x++ )
		mvwaddch(cdbIO, row, x, line);
	mvwaddch(cdbIO, row, x, arrow);
d320 5
a324 4
	int y;
	
	for ( y=startRow; y <= endRow; y++ )
		mvwaddch(cdbIO, y, col, line);
d327 21
@
